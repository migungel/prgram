@model DashboardApp.Models.DashboardResponse
@using Newtonsoft.Json

<h1>Device Data Dashboard</h1>

<form method="get" action="@Url.Action("Index", "Dashboard")" id="filterForm">
    <label for="startDate">Start Date:</label>
    <input type="date" id="startDate" name="startDate" value="@ViewData["startDate"]" />

    <label for="endDate">End Date:</label>
    <input type="date" id="endDate" name="endDate" value="@ViewData["endDate"]" />

    <input type="submit" value="Apply Filters" />
</form>

@foreach (var data in Model.DeviceData)
{
    <h2>@data.NombreParametro (@data.AbreviacionParametro)</h2>
    <canvas id="@data.CodigoParametro"></canvas>
}

<!-- Include Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('filterForm')?.addEventListener('submit', function (event) {
            event.preventDefault(); // Prevent the form from submitting the traditional way

            var startDate = document.getElementById('startDate').value;
            var endDate = document.getElementById('endDate').value;
            var url = `http://localhost:5204/api/DeviceData?startDate=${startDate}T00:00:00Z&endDate=${endDate}T23:59:59Z`;

            console.log("Service URL:");
            console.log(url);

            // Fetch the data using AJAX
            fetch(url)
                .then(response => response.json())
                .then(data => {
                    console.log("Device Data Response:");
                    console.log(data);

                    // Optionally, you can update the page with the new data here
                    // For example, by using JavaScript to dynamically update the charts
                    updateCharts(data);
                })
                .catch(error => console.error('Error fetching data:', error));
        });
    });

    function updateCharts(data) {
        // Clear existing charts
        document.querySelectorAll('canvas').forEach(canvas => {
            if (canvas.chart) {
                canvas.chart.destroy();
            }
        });

        data.device_data.forEach(d => {
            var ctx = document.getElementById(d.codigo_parametro)?.getContext('2d');
            if (ctx) {
                var chart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.device_dates,
                        datasets: [
                            {
                                label: 'Avg Data',
                                data: d.values.avg_data,
                                borderColor: 'rgba(75, 192, 192, 1)',
                                fill: false
                            },
                            {
                                label: 'Min Data',
                                data: d.values.min_data,
                                borderColor: 'rgba(153, 102, 255, 1)',
                                fill: false
                            },
                            {
                                label: 'Max Data',
                                data: d.values.max_data,
                                borderColor: 'rgba(255, 159, 64, 1)',
                                fill: false
                            }
                        ]
                    }
                });

                // Store chart instance in canvas for future reference
                ctx.canvas.chart = chart;
            } else {
                console.error('Canvas element not found for ID: ' + d.codigo_parametro);
            }
        });
    }
</script>
